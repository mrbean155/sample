<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
//use AppBundle\AppBundle;

/**
 * SuggestionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SuggestionRepository extends \Doctrine\ORM\EntityRepository
{

    public function fetchSuggestions($page)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('s, COUNT(r.id) as total, AVG(r.rate) as rating')
            ->from('AppBundle:Suggestion', 's')
            ->leftJoin('AppBundle:Rate', 'r', 'WITH', 's.id = r.suggestId')
            ->groupBy('s');
        return $this->paginate($qb->getQuery(), $page, 15);

    }

    public function fetchSuggestion($uid)
    {
        $sql = 'SELECT s.id, r.userId, r.rate
                    From AppBundle:Suggestion s LEFT JOIN AppBundle:Rate r
                    WITH s.id = r.suggestId
                    WHERE r.userId  = ' . $uid ;
        $query = $this->getEntityManager()
                    ->createQuery($sql);
        return $query->getResult();
    }

    /**
     * Paginator Helper
     *
     * Pass through a query object, current page & limit
     * the offset is calculated from the page and limit
     * returns an `Paginator` instance, which you can call the following on:
     *
     *     $paginator->getIterator()->count() # Total fetched (ie: `5` posts)
     *     $paginator->count() # Count of ALL posts (ie: `20` posts)
     *     $paginator->getIterator() # ArrayIterator
     *
     * @param Doctrine\ORM\Query $dql   DQL Query Object
     * @param integer            $page  Current page (defaults to 1)
     * @param integer            $limit The total number per page (defaults to 5)
     *
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function paginate($dql, $page = 1, $limit = 15)
    {
        $paginator = new Paginator($dql);

        $paginator->getQuery()
            ->setFirstResult($limit * ($page - 1)) // Offset
            ->setMaxResults($limit); // Limit

        return $paginator;
    }
}
